{
  "item_path": "../00-INTAKE/cosmic_web_dynamics_A1_v2.html",
  "final_status": "REJECTED",
  "processing_time_seconds": 0.0015749931335449219,
  "timestamp": "2025-05-29T03:54:25.511501",
  "stages_completed": [
    "00-INTAKE"
  ],
  "validation_results": {
    "00-INTAKE": {
      "passed": true,
      "content_length": 13816,
      "claims_count": 0,
      "equations_count": 93,
      "hypotheses_count": 1,
      "claims": [],
      "equations": [
        "lang=\"en\">",
        "charset=\"UTF-8\">",
        "src=\"https://cdnjs",
        "src=\"https://cdn",
        "id=\"container\"></div>",
        "COUNT = 50000;",
        "BOUNDS = 150; // Simulation domain size, slightly larger",
        "STRENGTH = 0",
        "STRENGTH = 0",
        "DAMPING = 0",
        "SIZE = 1",
        "STRENGTH = 0",
        "voids = [",
        "filaments = [",
        "lastTime = performance",
        "totalVoidForce = new THREE",
        "voidRegion => {",
        "vecToParticle = new THREE",
        "distSq = vecToParticle",
        "dist = Math",
        "forceMagnitude = VOID_REPULSION_STRENGTH * (voidRegion",
        "totalFilamentForce = new THREE",
        "flowVelocity = new THREE",
        "filament => {",
        "lineDir = new THREE",
        "vecStartToParticle = new THREE",
        "t = vecStartToParticle",
        "closestPoint = filament",
        "closestPoint = filament",
        "closestPoint = filament",
        "vecToFilament = new THREE",
        "dist = vecToFilament",
        "forceMagnitude = FILAMENT_ATTRACTION_STRENGTH * filament",
        "flowDir = lineDir",
        "scene = new THREE",
        "fog = new THREE",
        "camera = new THREE",
        "renderer = new THREE",
        "controls = new THREE",
        "enableDamping = true;",
        "dampingFactor = 0",
        "minDistance = 20; // Increased min distance",
        "maxDistance = 700; // Increased max distance",
        "maxPolarAngle = Math",
        "geometry = new THREE",
        "particlePositions = new Float32Array(PARTICLE_COUNT * 3);",
        "particleVelocities = new Float32Array(PARTICLE_COUNT * 3);",
        "colors = new Float32Array(PARTICLE_COUNT * 3); // Colors are static for now",
        "color = new THREE",
        "i = 0; i < PARTICLE_COUNT; i++) {",
        "x = (Math",
        "y = (Math",
        "z = (Math",
        "init = PARTICLE_BOUNDS * 0",
        "init = Math",
        "init = Math",
        "x = r_init * Math",
        "y = r_init * Math",
        "z = r_init * Math",
        "minDistToFilament = Infinity;",
        "fil => {",
        "lineDir = new THREE",
        "vecStartToParticle = new THREE",
        "t = vecStartToParticle",
        "closestPoint = fil",
        "closestPoint = fil",
        "closestPoint = fil",
        "minDistToFilament = Math",
        "inVoid = false;",
        "v => {",
        "inVoid = true;",
        "pointsMaterial = new THREE",
        "particleSystem = new THREE",
        "positions = particleSystem",
        "timeScale = deltaTime * 25; // Adjusted timescale",
        "i = 0; i < PARTICLE_COUNT; i++) {",
        "ix = i * 3, iy = i * 3 + 1, iz = i * 3 + 2;",
        "p = new THREE",
        "v = new THREE",
        "voidForce = getVoidForce(p);",
        "filamentEffects = getFilamentForce(p);",
        "filamentAttractionForce = filamentEffects",
        "filamentFlowVelocity = filamentEffects",
        "acc = new THREE",
        "x = Math",
        "y = Math",
        "z = Math",
        "needsUpdate = true;",
        "currentTime = performance",
        "deltaTime = Math",
        "lastTime = currentTime;",
        "aspect = window",
        "E = 1"
      ],
      "hypotheses": [
        "be represented as attractive line segments\n        const filaments = [\n            { start: new THREE."
      ]
    }
  },
  "rejection_stage": "01-INITIAL_SCREENING",
  "rejection_reason": "Initial screening pass rate 0.50 below 0.8 threshold",
  "destination": "09-REJECTED_ITEMS"
}