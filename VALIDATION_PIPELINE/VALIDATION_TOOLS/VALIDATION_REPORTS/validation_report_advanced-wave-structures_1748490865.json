{
  "item_path": "../00-INTAKE/advanced-wave-structures.html",
  "final_status": "REJECTED",
  "processing_time_seconds": 0.004419088363647461,
  "timestamp": "2025-05-29T03:54:25.536232",
  "stages_completed": [
    "00-INTAKE"
  ],
  "validation_results": {
    "00-INTAKE": {
      "passed": true,
      "content_length": 47216,
      "claims_count": 0,
      "equations_count": 357,
      "hypotheses_count": 0,
      "claims": [],
      "equations": [
        "lang=\"en\">",
        "charset=\"UTF-8\">",
        "name=\"viewport\" content=\"width=device-width, initial-scale=1",
        "type=\"range\"] {",
        "type=\"range\"]:hover {",
        "type=\"range\"]::-webkit-slider-thumb {",
        "id=\"container\">",
        "id=\"controls\">",
        "style=\"margin-top: 0; color: #00ffff; text-align: center;\">Advanced Spherical Harmonics</h3>",
        "class=\"control-group\">",
        "for=\"harmonic-degree\">Harmonic Degree (l)</label>",
        "type=\"range\" id=\"harmonic-degree\" min=\"0\" max=\"20\" value=\"3\" step=\"1\">",
        "class=\"value-display\" id=\"harmonic-degree-value\">3</div>",
        "class=\"control-group\">",
        "for=\"harmonic-order\">Harmonic Order (m)</label>",
        "type=\"range\" id=\"harmonic-order\" min=\"-20\" max=\"20\" value=\"2\" step=\"1\">",
        "class=\"value-display\" id=\"harmonic-order-value\">2</div>",
        "class=\"control-group\">",
        "for=\"ellipticity-a\">Ellipticity A</label>",
        "type=\"range\" id=\"ellipticity-a\" min=\"0",
        "max=\"3",
        "value=\"1",
        "step=\"0",
        "class=\"value-display\" id=\"ellipticity-a-value\">1",
        "class=\"control-group\">",
        "for=\"ellipticity-b\">Ellipticity B</label>",
        "type=\"range\" id=\"ellipticity-b\" min=\"0",
        "max=\"3",
        "value=\"1",
        "step=\"0",
        "class=\"value-display\" id=\"ellipticity-b-value\">1",
        "class=\"control-group\">",
        "for=\"ellipticity-c\">Ellipticity C</label>",
        "type=\"range\" id=\"ellipticity-c\" min=\"0",
        "max=\"3",
        "value=\"0",
        "step=\"0",
        "class=\"value-display\" id=\"ellipticity-c-value\">0",
        "class=\"control-group\">",
        "for=\"time-evolution\">Time Evolution Rate</label>",
        "type=\"range\" id=\"time-evolution\" min=\"0",
        "max=\"5",
        "value=\"1",
        "step=\"0",
        "class=\"value-display\" id=\"time-evolution-value\">1",
        "class=\"control-group\">",
        "for=\"amplitude\">Amplitude</label>",
        "type=\"range\" id=\"amplitude\" min=\"0",
        "max=\"10",
        "value=\"2",
        "step=\"0",
        "class=\"value-display\" id=\"amplitude-value\">2",
        "class=\"control-group\">",
        "for=\"radial-falloff\">Radial Falloff</label>",
        "type=\"range\" id=\"radial-falloff\" min=\"0",
        "max=\"5",
        "value=\"1",
        "step=\"0",
        "class=\"value-display\" id=\"radial-falloff-value\">1",
        "class=\"control-group\">",
        "for=\"particle-count\">Particle Count</label>",
        "id=\"particle-count\">",
        "value=\"100000\">100K (Fast)</option>",
        "value=\"300000\" selected>300K (Balanced)</option>",
        "value=\"500000\">500K (Quality)</option>",
        "value=\"1000000\">1M (Ultra)</option>",
        "class=\"control-group\">",
        "for=\"algorithm-type\">Algorithm Type</label>",
        "id=\"algorithm-type\">",
        "value=\"ellipsoidal\" selected>Ellipsoidal Harmonics</option>",
        "value=\"spherical\">Classical Spherical</option>",
        "value=\"hybrid\">Hybrid (GPU Optimized)</option>",
        "class=\"control-group\">",
        "for=\"quantum-coherence\">Quantum Coherence</label>",
        "type=\"range\" id=\"quantum-coherence\" min=\"0",
        "max=\"2",
        "value=\"1",
        "step=\"0",
        "class=\"value-display\" id=\"quantum-coherence-value\">1",
        "class=\"control-group\">",
        "for=\"nonlinear-coupling\">Nonlinear Coupling</label>",
        "type=\"range\" id=\"nonlinear-coupling\" min=\"0",
        "max=\"1",
        "value=\"0",
        "step=\"0",
        "class=\"value-display\" id=\"nonlinear-coupling-value\">0",
        "class=\"control-group\">",
        "for=\"wave-interference\">Wave Interference</label>",
        "type=\"range\" id=\"wave-interference\" min=\"0",
        "max=\"1",
        "value=\"0",
        "step=\"0",
        "class=\"value-display\" id=\"wave-interference-value\">0",
        "onclick=\"resetToDefaults()\">Reset</button>",
        "onclick=\"randomizeParameters()\">Randomize</button>",
        "onclick=\"toggleAnimation()\">Pause/Play</button>",
        "onclick=\"exportConfiguration()\">Export Config</button>",
        "id=\"info\">",
        "class=\"math-display\">Y<sub>l</sub><sup>m</sup>(\u03b8,\u03c6) = N<sub>lm</sub> P<sub>l</sub><sup>m</sup>(cos \u03b8) e<sup>im\u03c6</sup></div>",
        "id=\"current-mode\">Mode: Y<sub>3</sub><sup>2</sup></div>",
        "id=\"performance\">",
        "id=\"fps\">60</span></div>",
        "id=\"particle-display\">300000</span></div>",
        "id=\"gpu-util\">85%</span></div>",
        "id=\"memory-usage\">2",
        "src=\"https://cdnjs",
        "src=\"https://cdnjs",
        "isAnimating = true;",
        "startTime = Date",
        "frameCount = 0;",
        "lastTime = performance",
        "fps = 60;",
        "CACHE = new Map();",
        "CACHE = new Map();",
        "CACHE = new Map();",
        "webglSupportsCompute = false;",
        "quantumCoherenceFactors = new Float32Array(1000000);",
        "nonlinearCouplingMatrix = new Float32Array(1000000);",
        "RATIO = (1 + Math",
        "MASCHERONI = 0",
        "CONSTANT = 4",
        "SCALE = 1",
        "scene = new THREE",
        "camera = new THREE",
        "renderer = new THREE",
        "synth = new Tone",
        "filter = new Tone",
        "reverb = new Tone",
        "i = 0; i <= 50; i++) {",
        "particleCount = parseInt(document",
        "positionBuffer = new Float32Array(particleCount * 3);",
        "velocityBuffer = new Float32Array(particleCount * 3);",
        "forceBuffer = new Float32Array(particleCount * 3);",
        "waveInterferenceBuffer = new Float32Array(particleCount);",
        "resonanceBuffer = new Float32Array(particleCount);",
        "gl = renderer",
        "webglSupportsCompute = gl",
        "i = 0; i < particleCount; i++) {",
        "phi = i * GOLDEN_RATIO * 2 * Math",
        "i = 0; i < particleCount; i++) {",
        "scaledIndex = i / particleCount * FEIGENBAUM_CONSTANT;",
        "i = 0; i < particleCount * 3; i += 3) {",
        "index = i / 3;",
        "y = 1 - (index / (particleCount - 1)) * 2;",
        "radius = Math",
        "theta = GOLDEN_RATIO * index * 2 * Math",
        "r = 20 + Math",
        "textureSize = Math",
        "positionTexture = new THREE",
        "velocityTexture = new THREE",
        "forceTexture = new THREE",
        "computeVertexShader = `",
        "vUv = position * 0",
        "Position = vec4(position, 0",
        "computeFragmentShader = `",
        "cosTheta = cos(theta);",
        "sinTheta = sin(theta);",
        "legendre = pow(sinTheta, abs(m)) * cos(l * theta + m * phi + timePhase);",
        "normalization = sqrt((2",
        "position = texture2D(positionTexture, vUv)",
        "velocity = texture2D(velocityTexture, vUv)",
        "ellPos = position / ellipticity;",
        "r = length(ellPos);",
        "FragColor = vec4(0",
        "theta = acos(clamp(ellPos",
        "phi = atan(ellPos",
        "harmonic = fastSphericalHarmonic(harmonicDegree, harmonicOrder, theta, phi, time);",
        "radialMod = exp(-r / radialFalloff) * pow(r, harmonicDegree);",
        "potential = amplitude * harmonic * radialMod;",
        "h = 0",
        "force = vec3(0",
        "x = -sin(theta) * cos(phi) * potential * harmonicDegree / r;",
        "y = -sin(theta) * sin(phi) * potential * harmonicDegree / r;",
        "z = -cos(theta) * potential * harmonicDegree / r;",
        "FragColor = vec4(force, 1",
        "computeMaterial = new THREE",
        "computeShader = computeMaterial;",
        "controls = ['harmonic-degree', 'harmonic-order', 'ellipticity-a', 'ellipticity-b', ",
        "id => {",
        "element = document",
        "particleCount = parseInt(document",
        "geometry = new THREE",
        "colors = new Float32Array(particleCount * 3);",
        "material = new THREE",
        "particleSystem = new THREE",
        "result = 1;",
        "i = 2; i <= n; i++) {",
        "key = `${l}_${m}_${x",
        "absM = Math",
        "l === 0 && absM === 0) {",
        "result = 1;",
        "l === absM) {",
        "doubleFactorial = oddDoubleFactorial(2 * l - 1);",
        "sign = (l % 2 === 0) ",
        "result = sign * doubleFactorial * Math",
        "l === absM + 1) {",
        "prevValue = associatedLegendrePolynomial(l - 1, absM, x);",
        "result = x * (2 * l - 1) * prevValue;",
        "m = (2l-1)xP_{l-1}^m - (l+m-1)P_{l-2}^m",
        "result = ((2 * l - 1) * x * p1 - (l + absM - 1) * p2) / (l - absM);",
        "sign = (absM % 2 === 0) ",
        "factorRatio = factorial(l - absM) / factorial(l + absM);",
        "result = 1;",
        "i = n; i > 0; i -= 2) {",
        "timePhase = 0) {",
        "key = `${l}_${m}_${theta",
        "absM = Math",
        "normalization = Math",
        "legendre = associatedLegendrePolynomial(l, absM, Math",
        "m === 0) {",
        "azimuthal = 1 / Math",
        "azimuthal = Math",
        "azimuthal = Math",
        "result = normalization * legendre * azimuthal;",
        "xEll = x / ellipticityA;",
        "yEll = y / ellipticityB;",
        "zEll = z / ellipticityC;",
        "r = Math",
        "theta = Math",
        "phi = Math",
        "harmonic = sphericalHarmonicYlm(l, m, theta, phi, timePhase);",
        "ellipsoidalFactor = Math",
        "radialModulation = Math",
        "potential = amplitude * harmonic * radialModulation;",
        "h = 0",
        "fx = ellipsoidalHarmonicPotential(x + h, y, z, l, m, amplitude, timePhase, ellipticityA, ellipticityB, ellipticityC, radialFalloff) -",
        "fy = ellipsoidalHarmonicPotential(x, y + h, z, l, m, amplitude, timePhase, ellipticityA, ellipticityB, ellipticityC, radialFalloff) -",
        "fz = ellipsoidalHarmonicPotential(x, y, z + h, l, m, amplitude, timePhase, ellipticityA, ellipticityB, ellipticityC, radialFalloff) -",
        "time = (Date",
        "positions = particleSystem",
        "colors = particleSystem",
        "l = parseInt(document",
        "m = parseInt(document",
        "amplitude = parseFloat(document",
        "timeEvolution = parseFloat(document",
        "ellipticityA = parseFloat(document",
        "ellipticityB = parseFloat(document",
        "ellipticityC = parseFloat(document",
        "radialFalloff = parseFloat(document",
        "timePhase = time * timeEvolution;",
        "particleCount = positions",
        "i = 0; i < particleCount; i++) {",
        "idx = i * 3;",
        "x = positions[idx];",
        "y = positions[idx + 1];",
        "z = positions[idx + 2];",
        "baseForce = computeGradient(x, y, z, l, m, amplitude, timePhase, ",
        "coherenceFactor = quantumCoherenceFactors[i % quantumCoherenceFactors",
        "coherencePhase = time * QUANTUM_COHERENCE_SCALE + i * GOLDEN_RATIO;",
        "quantumModulation = Math",
        "couplingForce = { x: 0, y: 0, z: 0 };",
        "couplingStrength = nonlinearCouplingMatrix[i % nonlinearCouplingMatrix",
        "sampleStep = Math",
        "j = Math",
        "j === i) continue;",
        "jIdx = j * 3;",
        "dx = positions[jIdx] - x;",
        "dy = positions[jIdx + 1] - y;",
        "dz = positions[jIdx + 2] - z;",
        "distance = Math",
        "interferencePhase = waveInterferenceBuffer[i] + time * 0",
        "interferenceAmplitude = Math",
        "resonancePhase = resonanceBuffer[i] + time * 0",
        "resonanceAmplitude = Math",
        "totalForce = {",
        "adaptiveDamping = 0",
        "maxForce = 1",
        "x = Math",
        "y = Math",
        "z = Math",
        "r = Math",
        "scale = 40 / r;",
        "potential = ellipsoidalHarmonicPotential(x, y, z, l, m, amplitude, timePhase,",
        "normalizedPotential = Math",
        "coherenceColor = quantumModulation * 0",
        "interferenceColor = Math",
        "needsUpdate = true;",
        "needsUpdate = true;",
        "value = time;",
        "value = l;",
        "value = m;",
        "value = amplitude;",
        "value = radialFalloff;",
        "baseFreq = 220;",
        "harmonicFreq = baseFreq * (1 + l * 0",
        "quantumFreq = harmonicFreq * (1 + Math",
        "filterFreq = 500 + amplitude * 200 + l * 50;",
        "resonanceQ = 1 + Math",
        "distortion = Math",
        "animationId = requestAnimationFrame(animate);",
        "time = Date",
        "x = Math",
        "z = Math",
        "currentTime = performance",
        "fps = Math",
        "textContent = fps;",
        "frameCount = 0;",
        "lastTime = currentTime;",
        "particleCount = parseInt(document",
        "textContent = particleCount",
        "l = parseInt(document",
        "baseUtil = Math",
        "textContent = Math",
        "memoryMB = (particleCount * 36 + 100) / 1024 / 1024; // Rough estimate",
        "textContent = memoryMB",
        "controls = ['harmonic-degree', 'harmonic-order', 'ellipticity-a', 'ellipticity-b', ",
        "id => {",
        "element = document",
        "valueDisplay = document",
        "textContent = element",
        "l = document",
        "m = document",
        "innerHTML = `Mode: Y<sub>${l}</sub><sup>${m}</sup>`;",
        "mSlider = document",
        "lValue = parseInt(l);",
        "min = -lValue;",
        "max = lValue;",
        "value = Math",
        "textContent = mSlider",
        "config = {",
        "configJson = JSON",
        "blob = new Blob([configJson], { type: 'application/json' });",
        "url = URL",
        "a = document",
        "href = url;",
        "download = `spherical-harmonics-config-${Date",
        "algorithm = document",
        "value = 3;",
        "value = 2;",
        "value = 1",
        "value = 1",
        "value = 0",
        "value = 1",
        "value = 2",
        "value = 1",
        "value = 1",
        "value = 0",
        "value = 0",
        "l = Math",
        "m = Math",
        "value = l;",
        "value = m;",
        "value = (0",
        "value = (0",
        "value = (0",
        "value = (Math",
        "value = (1 + Math",
        "value = (0",
        "value = (Math",
        "value = (Math",
        "value = (Math",
        "isAnimating = ",
        "aspect = window",
        "E = new Map();",
        "E = new Map();",
        "E = new Map();",
        "E = 1"
      ],
      "hypotheses": []
    }
  },
  "rejection_stage": "01-INITIAL_SCREENING",
  "rejection_reason": "Initial screening pass rate 0.50 below 0.8 threshold",
  "destination": "09-REJECTED_ITEMS"
}