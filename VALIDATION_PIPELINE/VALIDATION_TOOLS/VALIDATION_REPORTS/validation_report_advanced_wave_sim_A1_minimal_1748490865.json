{
  "item_path": "../00-INTAKE/advanced_wave_sim_A1_minimal.html",
  "final_status": "REJECTED",
  "processing_time_seconds": 0.001180887222290039,
  "timestamp": "2025-05-29T03:54:25.401444",
  "stages_completed": [
    "00-INTAKE"
  ],
  "validation_results": {
    "00-INTAKE": {
      "passed": true,
      "content_length": 8882,
      "claims_count": 0,
      "equations_count": 71,
      "hypotheses_count": 1,
      "claims": [],
      "equations": [
        "lang=\"en\">",
        "charset=\"UTF-8\">",
        "src=\"https://cdnjs",
        "src=\"https://cdn",
        "id=\"container\"></div>",
        "COUNT = 50000;",
        "BOUNDS = 100; // Simulation domain size",
        "FREQ = 65",
        "M = 2;",
        "N = 2;",
        "P = 4;",
        "STRENGTH = 0",
        "DAMPING = 0",
        "SIZE = 1",
        "GRAD = 0",
        "lastTime = performance",
        "frameCount = 0;",
        "base = freq / 50",
        "r = Math",
        "r === 0) return 0; ",
        "phi = Math",
        "theta = Math",
        "angularPartM = Math",
        "angularPartN = Math",
        "radialPartP = Math",
        "potential = angularPartM * angularPartN * radialPartP;",
        "potential = isNaN(potential) ",
        "dx = (chladniPotential3D(x + DELTA_GRAD, y, z, freq, modeM, modeN, modeP) - chladniPotential3D(x - DELTA_GRAD, y, z, freq, modeM, modeN, modeP)) / (2 * DELTA_GRAD);",
        "dy = (chladniPotential3D(x, y + DELTA_GRAD, z, freq, modeM, modeN, modeP) - chladniPotential3D(x, y - DELTA_GRAD, z, freq, modeM, modeN, modeP)) / (2 * DELTA_GRAD);",
        "dz = (chladniPotential3D(x, y, z + DELTA_GRAD, freq, modeM, modeN, modeP) - chladniPotential3D(x, y, z - DELTA_GRAD, freq, modeM, modeN, modeP)) / (2 * DELTA_GRAD);",
        "scene = new THREE",
        "fog = new THREE",
        "camera = new THREE",
        "renderer = new THREE",
        "controls = new THREE",
        "enableDamping = true;",
        "dampingFactor = 0",
        "minDistance = 10;",
        "maxDistance = 500;",
        "maxPolarAngle = Math",
        "geometry = new THREE",
        "particlePositions = new Float32Array(PARTICLE_COUNT * 3);",
        "particleVelocities = new Float32Array(PARTICLE_COUNT * 3);",
        "colors = new Float32Array(PARTICLE_COUNT * 3);",
        "color = new THREE",
        "i = 0; i < PARTICLE_COUNT; i++) {",
        "init = PARTICLE_BOUNDS * Math",
        "init = Math",
        "init = Math",
        "particleMaterials = new THREE",
        "particleSystem = new THREE",
        "positions = particleSystem",
        "timeScale = deltaTime * 30; ",
        "i = 0; i < PARTICLE_COUNT; i++) {",
        "ix = i * 3, iy = i * 3 + 1, iz = i * 3 + 2;",
        "x = positions[ix], y = positions[iy], z = positions[iz];",
        "vx = particleVelocities[ix], vy = particleVelocities[iy], vz = particleVelocities[iz];",
        "potential = chladniPotential3D(x, y, z, FREQ, MODE_M, MODE_N, MODE_P);",
        "gradP = gradientChladni3D(x, y, z, FREQ, MODE_M, MODE_N, MODE_P);",
        "ax = -FORCE_STRENGTH * potential * gradP",
        "ay = -FORCE_STRENGTH * potential * gradP",
        "az = -FORCE_STRENGTH * potential * gradP",
        "x = Math",
        "y = Math",
        "z = Math",
        "needsUpdate = true;",
        "currentTime = performance",
        "deltaTime = (currentTime - lastTime) / 1000; ",
        "lastTime = currentTime; // Update lastTime here",
        "aspect = window",
        "E = 1"
      ],
      "hypotheses": [
        "BE INSERTED HERE\n        let scene, camera, renderer, controls;\n        let particleSystem, particlePositions, particleVelocities, particleMaterials;\n        \n        let PARTICLE_COUNT = 50000;\n        const PARTICLE_BOUNDS = 100; // Simulation domain size\n        \n        // Chladni pattern parameters\n        let FREQ = 65."
      ]
    }
  },
  "rejection_stage": "01-INITIAL_SCREENING",
  "rejection_reason": "Initial screening pass rate 0.50 below 0.8 threshold",
  "destination": "09-REJECTED_ITEMS"
}