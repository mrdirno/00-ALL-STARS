
// Correct Physical Constants Module
// Generated by Mathematical Correction Framework
// Claude-3.5-Sonnet - 2025-05-29

const PHYSICS_CONSTANTS = {
    // Fundamental Constants
    c: 299792458,           // Speed of light in vacuum (m/s)
    G: 6.67430e-11,        // Gravitational constant (m³/kg/s²)
    h: 6.62607015e-34,     // Planck constant (J⋅s)
    hbar: 1.054571817e-34, // Reduced Planck constant (J⋅s)
    k_B: 1.380649e-23,     // Boltzmann constant (J/K)
    
    // Electromagnetic Constants
    e: 1.602176634e-19,    // Elementary charge (C)
    epsilon_0: 8.8541878128e-12, // Vacuum permittivity (F/m)
    mu_0: 1.25663706212e-6,      // Vacuum permeability (H/m)
    
    // Particle Masses
    m_e: 9.1093837015e-31,       // Electron mass (kg)
    m_p: 1.67262192369e-27,      // Proton mass (kg)
    m_n: 1.67492749804e-27,      // Neutron mass (kg)
    
    // Cosmological Constants
    H_0: 67.4,             // Hubble constant (km/s/Mpc)
    Omega_m: 0.315,        // Matter density parameter
    Omega_Lambda: 0.685,   // Dark energy density parameter
    
    // Conversion Factors
    eV_to_J: 1.602176634e-19,    // Electron volt to Joule
    pc_to_m: 3.0857e16,          // Parsec to meter
    ly_to_m: 9.4607e15,          // Light year to meter
    au_to_m: 1.495978707e11,     // Astronomical unit to meter
    
    // Mathematical Constants
    PI: Math.PI,
    E: Math.E,
    SQRT_2: Math.SQRT2,
    SQRT_PI: Math.sqrt(Math.PI),
    
    // Validation Functions
    validateConstant: function(name, value, tolerance = 1e-10) {
        if (this[name] === undefined) {
            console.warn(`Unknown constant: ${name}`);
            return false;
        }
        const relative_error = Math.abs(value - this[name]) / this[name];
        if (relative_error > tolerance) {
            console.error(`Constant ${name} validation failed: expected ${this[name]}, got ${value}, relative error: ${relative_error}`);
            return false;
        }
        return true;
    },
    
    // Safe Division Function
    safeDivide: function(numerator, denominator, epsilon = 1e-15) {
        if (Math.abs(denominator) < epsilon) {
            console.warn(`Division by near-zero value: ${denominator}, using epsilon: ${epsilon}`);
            return numerator / (denominator + Math.sign(denominator) * epsilon);
        }
        return numerator / denominator;
    },
    
    // Numerical Stability Helpers
    isFiniteAndReal: function(value) {
        return isFinite(value) && !isNaN(value);
    },
    
    clampToRange: function(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
};

// Export for use in simulations
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PHYSICS_CONSTANTS;
}
